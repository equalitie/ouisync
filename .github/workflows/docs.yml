name: Generate API docs and deploy them to Github Pages

on:
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest
# queued. However, do NOT cancel in-progress runs as we want to allow these production deployments
# to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    # Only run this in the main repo
    if: github.repository == 'equalitie/ouisync'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Install NDK
        run: $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "ndk;27.2.12479018"

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
            channel: 'stable'
            cache: true

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Build docs for the rust library
        run: cargo doc --package ouisync --lib --no-deps

      - name: Build docs for the kotlin bindings
        working-directory: bindings/kotlin
        run: ./gradlew dokkaGenerate

      - name: Build docs for the dart bindings
        working-directory: bindings/dart
        run: |
          dart run tool/bindgen.dart
          dart doc --verbose

      - name: Prepare the files
        run: |
          mkdir -p _site
          cp -r target/doc _site/rust
          cp -r bindings/kotlin/build/dokka/html _site/kotlin
          cp -r bindings/dart/doc/api _site/dart
          cp doc/index.html _site/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
